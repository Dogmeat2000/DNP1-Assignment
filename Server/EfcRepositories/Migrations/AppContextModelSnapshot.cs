// <auto-generated />
using System;
using EfcRepositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfcRepositories.Migrations
{
    [DbContext(typeof(AppContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Entities.Comment", b =>
                {
                    b.Property<int>("Comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Author_Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body_txt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentForum_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentPost_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp_created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp_deleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp_modified")
                        .HasColumnType("TEXT");

                    b.HasKey("Comment_id");

                    b.HasIndex("Author_Id");

                    b.HasIndex("ParentPost_id");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Entities.Forum", b =>
                {
                    b.Property<int>("Forum_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Author_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastCommentPost_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastComment_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastPost_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentForum_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp_created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp_deleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp_modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title_txt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Forum_id");

                    b.HasIndex("Author_id");

                    b.HasIndex("ParentForum_id");

                    b.ToTable("Forums", (string)null);
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.Property<int>("Post_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Author_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body_txt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentForum_id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp_created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp_deleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp_modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title_txt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Post_id");

                    b.HasIndex("Author_id");

                    b.HasIndex("ParentForum_id");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("User_id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Entities.UserProfile", b =>
                {
                    b.Property<int>("Profile_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("User_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Profile_id");

                    b.HasIndex("User_id")
                        .IsUnique();

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("Entities.Comment", b =>
                {
                    b.HasOne("Entities.User", "AuthoringUser")
                        .WithMany("ManagedComments")
                        .HasForeignKey("Author_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Post", "ParentPost")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentPost_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthoringUser");

                    b.Navigation("ParentPost");
                });

            modelBuilder.Entity("Entities.Forum", b =>
                {
                    b.HasOne("Entities.User", "AuthoringUser")
                        .WithMany("ManagedForums")
                        .HasForeignKey("Author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Forum", "ParentForum")
                        .WithMany("ChildForums")
                        .HasForeignKey("ParentForum_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthoringUser");

                    b.Navigation("ParentForum");
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.HasOne("Entities.User", "AuthoringUser")
                        .WithMany("ManagedPosts")
                        .HasForeignKey("Author_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Forum", "ParentForum")
                        .WithMany("ChildPosts")
                        .HasForeignKey("ParentForum_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthoringUser");

                    b.Navigation("ParentForum");
                });

            modelBuilder.Entity("Entities.UserProfile", b =>
                {
                    b.HasOne("Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Entities.UserProfile", "User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Forum", b =>
                {
                    b.Navigation("ChildForums");

                    b.Navigation("ChildPosts");
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("ManagedComments");

                    b.Navigation("ManagedForums");

                    b.Navigation("ManagedPosts");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
